/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __MsgDisp_MsgText_ifc_MSG_h__
#define __MsgDisp_MsgText_ifc_MSG_h__

#include "emC/Base/MemC_emC.h"        //basic concept

#include "Jc/ObjectJc.h"        //basic concept

#include "Jc/StringJc.h"        //used often

   //basic concept


/* J2C: Forward declaration of struct ***********************************************/
struct CollectionJc_t;


/* J2C: includes *********************************************************/
#include "Jc/StringJc.h"  //embedded type in class data


/*@CLASS_C MsgConfigItem_MsgText_ifc_MSG @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct MsgConfigItem_MsgText_ifc_MSG_t
{ 
  union { ObjectJc object; } base; 
  StringJc text;   /*The message text can contain format specifier for the additional values. */
  StringJc identText;   /*Identification String for non-numbered message, see {@link MsgPrintStream}*/
  int32 identNr;   /*The message ident.*/
  int32 identNrLast;   /*The last ident if this entry describes a range. */
  StringJc dst;   /*Some chars which can specify the destination (output) for the message. */
  char type_; 
} MsgConfigItem_MsgText_ifc_MSG_s;
  

#define sizeof_MsgConfigItem_MsgText_ifc_MSG_s sizeof(MsgConfigItem_MsgText_ifc_MSG_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef MsgConfigItem_MsgText_ifc_MSGREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define MsgConfigItem_MsgText_ifc_MSGREFDEF
  struct MsgConfigItem_MsgText_ifc_MSG_t;
  typedef TYPE_EnhancedRefJc(MsgConfigItem_MsgText_ifc_MSG);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct MsgConfigItem_MsgText_ifc_MSG_X_t { ObjectArrayJc head; MsgConfigItem_MsgText_ifc_MSGREF data[50]; } MsgConfigItem_MsgText_ifc_MSG_X;
typedef struct MsgConfigItem_MsgText_ifc_MSG_Y_t { ObjectArrayJc head; MsgConfigItem_MsgText_ifc_MSG_s data[50]; } MsgConfigItem_MsgText_ifc_MSG_Y;

 extern_C struct ClassJc_t const refl_MsgConfigItem_MsgText_ifc_MSG_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_MsgConfigItem_MsgText_ifc_MSG(OBJP) { CONST_ObjectJc(sizeof(MsgConfigItem_MsgText_ifc_MSG_s), OBJP, &refl_MsgConfigItem_MsgText_ifc_MSG_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_MsgConfigItem_MsgText_ifc_MSG_F(ObjectJc* othis, ThCxt* _thCxt);




typedef void MT_set_type_MsgConfigItem_MsgText_ifc_MSG(MsgConfigItem_MsgText_ifc_MSG_s* thiz, StringJc src, ThCxt* _thCxt);
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C void set_type_MsgConfigItem_MsgText_ifc_MSG_F(MsgConfigItem_MsgText_ifc_MSG_s* thiz, StringJc src, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void set_type_MsgConfigItem_MsgText_ifc_MSG(MsgConfigItem_MsgText_ifc_MSG_s* thiz, StringJc src, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Vtbl_MsgConfigItem_MsgText_ifc_MSG[]; //marker for methodTable check
typedef struct Vtbl_MsgConfigItem_MsgText_ifc_MSG_t
{ VtblHeadJc head;
  MT_set_type_MsgConfigItem_MsgText_ifc_MSG* set_type;
  Vtbl_ObjectJc ObjectJc;
} Vtbl_MsgConfigItem_MsgText_ifc_MSG;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class MsgConfigItem_MsgText_ifc_MSG : private MsgConfigItem_MsgText_ifc_MSG_s
{ public:

  virtual void set_type(StringJcpp src){ set_type_MsgConfigItem_MsgText_ifc_MSG_F(this, src,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C MsgText_ifc_MSG @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct MsgText_ifc_MSG_t
{ 
  union { ObjectJc object; } base; 
} MsgText_ifc_MSG_s;
  

#define sizeof_MsgText_ifc_MSG_s sizeof(MsgText_ifc_MSG_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef MsgText_ifc_MSGREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define MsgText_ifc_MSGREFDEF
  struct MsgText_ifc_MSG_t;
  typedef TYPE_EnhancedRefJc(MsgText_ifc_MSG);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct MsgText_ifc_MSG_X_t { ObjectArrayJc head; MsgText_ifc_MSGREF data[50]; } MsgText_ifc_MSG_X;
typedef struct MsgText_ifc_MSG_Y_t { ObjectArrayJc head; MsgText_ifc_MSG_s data[50]; } MsgText_ifc_MSG_Y;

 extern_C struct ClassJc_t const refl_MsgText_ifc_MSG_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_MsgText_ifc_MSG(OBJP) { CONST_ObjectJc(sizeof(MsgText_ifc_MSG_s), OBJP, &refl_MsgText_ifc_MSG_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_MsgText_ifc_MSG_F(ObjectJc* othis, ThCxt* _thCxt);


#define version_MsgText_ifc_MSG 20120822  /*version, history and license:*/


/**Returns a message text to the given ident number
*/
typedef char const* MT_getMsgText_MsgText_ifc_MSG(ObjectJc* ithis, int32 ident, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C char const* getMsgText_MsgText_ifc_MSG(ObjectJc* ithis, int32 ident, ThCxt* _thCxt);

typedef struct CollectionJc_t* MT_getListItems_MsgText_ifc_MSG(ObjectJc* ithis, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct CollectionJc_t* getListItems_MsgText_ifc_MSG(ObjectJc* ithis, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Vtbl_MsgText_ifc_MSG[]; //marker for methodTable check
typedef struct Vtbl_MsgText_ifc_MSG_t
{ VtblHeadJc head;
  MT_getMsgText_MsgText_ifc_MSG* getMsgText;
  MT_getListItems_MsgText_ifc_MSG* getListItems;
  Vtbl_ObjectJc ObjectJc;
} Vtbl_MsgText_ifc_MSG;



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class MsgText_ifc_MSG : private MsgText_ifc_MSG_s
{ public:

  virtual struct CollectionJc_t* getListItems()=0;

  virtual char const* getMsgText(int32 ident)=0;
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__MsgDisp_MsgText_ifc_MSG_h__
