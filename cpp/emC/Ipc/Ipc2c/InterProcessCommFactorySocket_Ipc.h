/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __Ipc2c_InterProcessCommFactorySocket_Ipc_h__
#define __Ipc2c_InterProcessCommFactorySocket_Ipc_h__

#include "emC/Base/MemC_emC.h"        //basic concept

#include "emC/Jc/ObjectJc.h"        //basic concept

#include "emC/Jc/StringJc.h"        //used often

   //basic concept


/* J2C: Forward declaration of struct ***********************************************/
struct Address_InterProcessComm_t;
struct InterProcessComm_t;
struct InterProcessCommFactorySocket_Ipc_t;


/* J2C: includes *********************************************************/
#include "emC/Ipc/InterProcessComm.h"  //superclass


/*@CLASS_C InterProcessCommFactorySocket_Ipc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InterProcessCommFactorySocket_Ipc_t
{ 
  union { ObjectJc object; InterProcessCommFactory_s super;} base; 
} InterProcessCommFactorySocket_Ipc_s;
  

#define sizeof_InterProcessCommFactorySocket_Ipc_s sizeof(InterProcessCommFactorySocket_Ipc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InterProcessCommFactorySocket_IpcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define InterProcessCommFactorySocket_IpcREFDEF
  struct InterProcessCommFactorySocket_Ipc_t;
  typedef TYPE_EnhancedRefJc(InterProcessCommFactorySocket_Ipc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InterProcessCommFactorySocket_Ipc_X_t { ObjectArrayJc head; InterProcessCommFactorySocket_IpcREF data[50]; } InterProcessCommFactorySocket_Ipc_X;
typedef struct InterProcessCommFactorySocket_Ipc_Y_t { ObjectArrayJc head; InterProcessCommFactorySocket_Ipc_s data[50]; } InterProcessCommFactorySocket_Ipc_Y;

 extern_C struct ClassJc_t const refl_InterProcessCommFactorySocket_Ipc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InterProcessCommFactorySocket_Ipc(OBJP) { CONST_ObjectJc(sizeof(InterProcessCommFactorySocket_Ipc_s), OBJP, &refl_InterProcessCommFactorySocket_Ipc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InterProcessCommFactorySocket_Ipc_F(ObjectJc* othis, ThCxt* _thCxt);




METHOD_C struct InterProcessCommFactorySocket_Ipc_t* ctorO_InterProcessCommFactorySocket_Ipc(ObjectJc* othis, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct InterProcessComm_t* create_S_InterProcessCommFactorySocket_Ipc_F(InterProcessCommFactory_s* ithis, StringJc protocolAndOwnAddr, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct InterProcessComm_t* create_S_InterProcessCommFactorySocket_Ipc(InterProcessCommFactory_s* ithis, StringJc protocolAndOwnAddr, ThCxt* _thCxt);

/**Creates a InterProcessComm from a parameter String. The type depends on this String.
For example:
<ul>
<li>"UDP:192.16.35.3:1234" for UDP via socket. Don't write spaces, set the port after ':'
</ul> 
*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct InterProcessComm_t* create_Si_InterProcessCommFactorySocket_Ipc_F(InterProcessCommFactory_s* ithis, StringJc protocolAndOwnAddr, int32 nPort, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct InterProcessComm_t* create_Si_InterProcessCommFactorySocket_Ipc(InterProcessCommFactory_s* ithis, StringJc protocolAndOwnAddr, int32 nPort, ThCxt* _thCxt);

/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct InterProcessComm_t* create_AddrIpc_InterProcessCommFactorySocket_Ipc_F(InterProcessCommFactory_s* ithis, struct Address_InterProcessComm_t* addr, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct InterProcessComm_t* create_AddrIpc_InterProcessCommFactorySocket_Ipc(InterProcessCommFactory_s* ithis, struct Address_InterProcessComm_t* addr, ThCxt* _thCxt);

/**Creates an address information for the InterProcessComm from a parameter String. 
The inner type of the address determines which kind of InterprocessComm is matching for.
The inner type of the address depends on the given String. 
Therefore the kind of InterprocessComm is able to choice with a parameter String.
For example choice between UDP and a Dual-Port-Ram-Communication.
The maybe special implementation knows some formats and types.
<ul>
<li>"UDP:192.16.35.3:1234" for UDP via socket. Don't write spaces, set the port after ':'
</ul> 
*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct Address_InterProcessComm_t* createAddress_Si_InterProcessCommFactorySocket_Ipc_F(InterProcessCommFactory_s* ithis, StringJc protocolAndOwnAddr, int32 nPort, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct Address_InterProcessComm_t* createAddress_Si_InterProcessCommFactorySocket_Ipc(InterProcessCommFactory_s* ithis, StringJc protocolAndOwnAddr, int32 nPort, ThCxt* _thCxt);

/**Creates an address for InterProcesscommunication with given description.
*/
/* J2C:Implementation of the method, used for an immediate non-dynamic call: */
METHOD_C struct Address_InterProcessComm_t* createAddress_S_InterProcessCommFactorySocket_Ipc_F(InterProcessCommFactory_s* ithis, StringJc protocolAndAddr, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C struct Address_InterProcessComm_t* createAddress_S_InterProcessCommFactorySocket_Ipc(InterProcessCommFactory_s* ithis, StringJc protocolAndAddr, ThCxt* _thCxt);

METHOD_C struct Address_InterProcessComm_t* createAddressSocket_InterProcessCommFactorySocket_Ipc(/*J2C:static method*/ StringJc type, StringJc addr, int32 nPort, ThCxt* _thCxt);


/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Vtbl_InterProcessCommFactorySocket_Ipc[]; //marker for methodTable check
#ifdef DEF_ClassJc_Vtbl
typedef struct Vtbl_InterProcessCommFactorySocket_Ipc_t
{ VtblHeadJc head;
  Vtbl_InterProcessCommFactory InterProcessCommFactory;
} Vtbl_InterProcessCommFactorySocket_Ipc;
#endif //def DEF_ClassJc_Vtbl



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InterProcessCommFactorySocket_Ipc : private InterProcessCommFactorySocket_Ipc_s
{ public:

  struct Address_InterProcessComm_t* createAddressSocket(StringJcpp type, StringJcpp addr, int32 nPort){  return createAddressSocket_InterProcessCommFactorySocket_Ipc(type, addr, nPort,  null/*_thCxt*/); }

  virtual struct Address_InterProcessComm_t* createAddress(StringJcpp protocolAndAddr){  return createAddress_S_InterProcessCommFactorySocket_Ipc_F(&this->base.super, protocolAndAddr,  null/*_thCxt*/); }

  virtual struct Address_InterProcessComm_t* createAddress(StringJcpp protocolAndOwnAddr, int32 nPort){  return createAddress_Si_InterProcessCommFactorySocket_Ipc_F(&this->base.super, protocolAndOwnAddr, nPort,  null/*_thCxt*/); }

  virtual struct InterProcessComm_t* create(struct Address_InterProcessComm_t* addr){  return create_AddrIpc_InterProcessCommFactorySocket_Ipc_F(&this->base.super, addr,  null/*_thCxt*/); }

  virtual struct InterProcessComm_t* create(StringJcpp protocolAndOwnAddr){  return create_S_InterProcessCommFactorySocket_Ipc_F(&this->base.super, protocolAndOwnAddr,  null/*_thCxt*/); }

  virtual struct InterProcessComm_t* create(StringJcpp protocolAndOwnAddr, int32 nPort){  return create_Si_InterProcessCommFactorySocket_Ipc_F(&this->base.super, protocolAndOwnAddr, nPort,  null/*_thCxt*/); }

  InterProcessCommFactorySocket_Ipc(){ iniz_ObjectJc(&this->base.object, this, sizeof(InterProcessCommFactorySocket_Ipc_s), null, 0); setReflection_ObjectJc(&this->base.object, &refl_InterProcessCommFactorySocket_Ipc_s, 0); ctorO_InterProcessCommFactorySocket_Ipc(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__Ipc2c_InterProcessCommFactorySocket_Ipc_h__
