/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __InspcJ2c_InspcDataInfo_Inspc_h__
#define __InspcJ2c_InspcDataInfo_Inspc_h__

#include "emC/Base/MemC_emC.h"        //basic concept

#include "emC/Jc/ObjectJc.h"        //basic concept

#include "emC/Jc/StringJc.h"        //used often

   //basic concept


/* J2C: Forward declaration of struct ***********************************************/
struct FieldJc_t;
struct InspcDataInfo_Inspc_t;


/* J2C: includes *********************************************************/
#include "emC/Jc/ReflMemAccessJc.h"  //embedded type in class data


/*@CLASS_C InspcDataInfo_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InspcDataInfo_Inspc_t
{ 
  union { ObjectJc object; } base; 
  int32 lastUsed;   /*Timeout of using.*/
  MemSegmJc addr;   /*The address and maybe segment in address space of the variable. */
  struct FieldJc_t const* reflectionField;   /*Address and Segment of the value. */
  int8 sizeofValue;   /*Nr of bytes of the type to read and transfer. */
  int8 typeValue;   /*The type of the value, to send in telegram, It is the definitions in */
  int16 lengthData;   /*If it is a recording order, size of the buffer. */
  int32 check;   /*This check code should be sent from request to safety the correctness of request. */
  int32 secondOfCreation;   /*Timestamp seconds after 1970 of creation. An item is only valid for a defined time. */
} InspcDataInfo_Inspc_s;
  

#define sizeof_InspcDataInfo_Inspc_s sizeof(InspcDataInfo_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InspcDataInfo_InspcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define InspcDataInfo_InspcREFDEF
  struct InspcDataInfo_Inspc_t;
  typedef TYPE_EnhancedRefJc(InspcDataInfo_Inspc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InspcDataInfo_Inspc_X_t { ObjectArrayJc head; InspcDataInfo_InspcREF data[50]; } InspcDataInfo_Inspc_X;
typedef struct InspcDataInfo_Inspc_Y_t { ObjectArrayJc head; InspcDataInfo_Inspc_s data[50]; } InspcDataInfo_Inspc_Y;

 extern_C struct ClassJc_t const refl_InspcDataInfo_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InspcDataInfo_Inspc(OBJP) { CONST_ObjectJc(sizeof(InspcDataInfo_Inspc_s), OBJP, &refl_InspcDataInfo_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InspcDataInfo_Inspc_F(ObjectJc* othis, ThCxt* _thCxt);


#define version_InspcDataInfo_Inspc 20120409  /*Version, history and license*/


/**Default constructor. */
METHOD_C struct InspcDataInfo_Inspc_t* ctorO_InspcDataInfo_Inspc(ObjectJc* othis, ThCxt* _thCxt);


#ifdef DEF_ClassJc_Vtbl
/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Vtbl_InspcDataInfo_Inspc[]; //marker for methodTable check
typedef struct Vtbl_InspcDataInfo_Inspc_t
{ VtblHeadJc head;
  Vtbl_ObjectJc ObjectJc;
} Vtbl_InspcDataInfo_Inspc;
#endif //def DEF_ClassJc_Vtbl



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InspcDataInfo_Inspc : private InspcDataInfo_Inspc_s
{ public:

  InspcDataInfo_Inspc(){ init_ObjectJc(&this->base.object, sizeof(InspcDataInfo_Inspc_s), 0); setReflection_ObjectJc(&this->base.object, &refl_InspcDataInfo_Inspc_s, 0); ctorO_InspcDataInfo_Inspc(&this->base.object,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__InspcJ2c_InspcDataInfo_Inspc_h__
