/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __InspcJ2c_InspcDataExchangeAccess_Inspc_h__
#define __InspcJ2c_InspcDataExchangeAccess_Inspc_h__

#include "emC/Base/MemC_emC.h"        //basic concept

#include "emC/Jc/ObjectJc.h"        //basic concept

#include "emC/Jc/StringJc.h"        //used often

   //basic concept


/* J2C: Forward declaration of struct ***********************************************/
struct ByteDataAccessBaseJc_t;
struct InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_t;
struct InspcDataExchangeAccess_Inspc_t;
struct InspcDatagram_InspcDataExchangeAccess_Inspc_t;
struct InspcSetValueData_InspcDataExchangeAccess_Inspc_t;
struct InspcSetValue_InspcDataExchangeAccess_Inspc_t;
struct Inspcitem_InspcDataExchangeAccess_Inspc_t;


/* J2C: includes *********************************************************/
#include "emC/J1c/ByteDataAccessBaseJc.h"  //superclass


/*@CLASS_C InspcDatagram_InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InspcDatagram_InspcDataExchangeAccess_Inspc_t
{ 
  union { ByteDataAccessBaseJc_s super;} base; 
} InspcDatagram_InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_InspcDatagram_InspcDataExchangeAccess_Inspc_s sizeof(InspcDatagram_InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InspcDatagram_InspcDataExchangeAccess_InspcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define InspcDatagram_InspcDataExchangeAccess_InspcREFDEF
  struct InspcDatagram_InspcDataExchangeAccess_Inspc_t;
  typedef TYPE_EnhancedRefJc(InspcDatagram_InspcDataExchangeAccess_Inspc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InspcDatagram_InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; InspcDatagram_InspcDataExchangeAccess_InspcREF data[50]; } InspcDatagram_InspcDataExchangeAccess_Inspc_X;
typedef struct InspcDatagram_InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; InspcDatagram_InspcDataExchangeAccess_Inspc_s data[50]; } InspcDatagram_InspcDataExchangeAccess_Inspc_Y;

 extern_C struct ClassJc_t const refl_InspcDatagram_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InspcDatagram_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(InspcDatagram_InspcDataExchangeAccess_Inspc_s), OBJP, &refl_InspcDatagram_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InspcDatagram_InspcDataExchangeAccess_Inspc_F(InspcDatagram_InspcDataExchangeAccess_Inspc_s* thiz, ThCxt* _thCxt);


#define knrofBytes_InspcDatagram_InspcDataExchangeAccess_Inspc 0
#define knEntrant_InspcDatagram_InspcDataExchangeAccess_Inspc 2
#define kencryption_InspcDatagram_InspcDataExchangeAccess_Inspc 4
#define kseqnr_InspcDatagram_InspcDataExchangeAccess_Inspc 8
#define kanswerNr_InspcDatagram_InspcDataExchangeAccess_Inspc 12
#define kspare13_InspcDatagram_InspcDataExchangeAccess_Inspc 13
#define kspare14_InspcDatagram_InspcDataExchangeAccess_Inspc 14
#define sizeofHead_InspcDatagram_InspcDataExchangeAccess_Inspc 16


METHOD_C struct InspcDatagram_InspcDataExchangeAccess_Inspc_t* ctorM_iY_InspcDatagram_InspcDataExchangeAccess_Inspc(MemC mthis, int8ARRAY buffer, ThCxt* _thCxt);

METHOD_C struct InspcDatagram_InspcDataExchangeAccess_Inspc_t* ctorM_InspcDatagram_InspcDataExchangeAccess_Inspc(MemC mthis, ThCxt* _thCxt);

/**Assigns a datagram.
 */
#define assignDatagram_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ, data, length) \
\
{ \
  \
  assign_iYii_ByteDataAccessBaseJc((&(THIZ)->base.super), data, length, 0, _thCxt);\
}

#define setLengthDatagram_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ, length) \
\
{ \
  \
  setInt16_ii_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 0, length, _thCxt);\
}

#define getLengthDatagram_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ) \
(getInt16_i_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 0))

/**Sets the head for an request telegram. Sets the answer number to 0. 
Therefore it is for the first answer. All following answers uses {@link #incrAnswerNr()}
and {@link #markAnswerNrLast()} to change the answer nr.
*/
METHOD_C void setHeadRequest_InspcDatagram_InspcDataExchangeAccess_Inspc(InspcDatagram_InspcDataExchangeAccess_Inspc_s* thiz, int32 entrant, int32 seqNr, int32 encryption, ThCxt* _thCxt);

/**Sets the head for an answer telegram. Sets the answer number initially to 1. 
*/
METHOD_C void setHeadAnswer_InspcDatagram_InspcDataExchangeAccess_Inspc(InspcDatagram_InspcDataExchangeAccess_Inspc_s* thiz, int32 entrant, int32 seqNr, int32 encryption, ThCxt* _thCxt);

#define setEntrant_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ, nr) \
\
{ \
  \
  setInt16_ii_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), knEntrant_InspcDatagram_InspcDataExchangeAccess_Inspc, nr, _thCxt);\
}

#define getEntrant_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ) \
(getInt16_i_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), knEntrant_InspcDatagram_InspcDataExchangeAccess_Inspc))

#define getEncryption_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ) \
(getInt32_i_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kencryption_InspcDatagram_InspcDataExchangeAccess_Inspc))

#define setSeqnr_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ, nr) \
\
{ \
  \
  setInt32_ii_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kseqnr_InspcDatagram_InspcDataExchangeAccess_Inspc, nr, _thCxt);\
}

#define getSeqnr_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ) \
(getInt32_i_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kseqnr_InspcDatagram_InspcDataExchangeAccess_Inspc))

/**Mark the datagram as last answer. */
METHOD_C void markAnswerNrLast_InspcDatagram_InspcDataExchangeAccess_Inspc(InspcDatagram_InspcDataExchangeAccess_Inspc_s* thiz, ThCxt* _thCxt);

/**Increments the number for the answer datagram. */
METHOD_C void incrAnswerNr_InspcDatagram_InspcDataExchangeAccess_Inspc(InspcDatagram_InspcDataExchangeAccess_Inspc_s* thiz, ThCxt* _thCxt);

/**Gets the number of the answer datagram. 
The last datagramm is mask with the bit  */
#define getAnswerNr_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ) \
(getInt8_i_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kanswerNr_InspcDatagram_InspcDataExchangeAccess_Inspc) & 0x7f)

/**Gets the information about the last answer datagram.  */
#define lastAnswer_InspcDatagram_InspcDataExchangeAccess_Inspc(THIZ) \
((getInt8_i_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kanswerNr_InspcDatagram_InspcDataExchangeAccess_Inspc) & 0x80) == 0x80)


#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InspcDatagram_InspcDataExchangeAccess_Inspc : private InspcDatagram_InspcDataExchangeAccess_Inspc_s
{ public:

  //void assignDatagram(int8ARRAY data, int32 length){ assignDatagram_InspcDatagram_InspcDataExchangeAccess_Inspc(this, data, length); }

  int32 getAnswerNr(){  return getAnswerNr_InspcDatagram_InspcDataExchangeAccess_Inspc(this); }

  int32 getEncryption(){  return getEncryption_InspcDatagram_InspcDataExchangeAccess_Inspc(this); }

  int32 getEntrant(){  return getEntrant_InspcDatagram_InspcDataExchangeAccess_Inspc(this); }

  int32 getLengthDatagram(){  return getLengthDatagram_InspcDatagram_InspcDataExchangeAccess_Inspc(this); }

  int32 getSeqnr(){  return getSeqnr_InspcDatagram_InspcDataExchangeAccess_Inspc(this); }

  void incrAnswerNr(){ incrAnswerNr_InspcDatagram_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  bool lastAnswer(){  return lastAnswer_InspcDatagram_InspcDataExchangeAccess_Inspc(this); }

  void markAnswerNrLast(){ markAnswerNrLast_InspcDatagram_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  //void setEntrant(int32 nr){ setEntrant_InspcDatagram_InspcDataExchangeAccess_Inspc(this, nr); }

  void setHeadAnswer(int32 entrant, int32 seqNr, int32 encryption){ setHeadAnswer_InspcDatagram_InspcDataExchangeAccess_Inspc(this, entrant, seqNr, encryption,  null/*_thCxt*/); }

  void setHeadRequest(int32 entrant, int32 seqNr, int32 encryption){ setHeadRequest_InspcDatagram_InspcDataExchangeAccess_Inspc(this, entrant, seqNr, encryption,  null/*_thCxt*/); }

  //void setLengthDatagram(int32 length){ setLengthDatagram_InspcDatagram_InspcDataExchangeAccess_Inspc(this, length); }

  //void setSeqnr(int32 nr){ setSeqnr_InspcDatagram_InspcDataExchangeAccess_Inspc(this, nr); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C Inspcitem_InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct Inspcitem_InspcDataExchangeAccess_Inspc_t
{ 
  union { ByteDataAccessBaseJc_s super;} base; 
} Inspcitem_InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_Inspcitem_InspcDataExchangeAccess_Inspc_s sizeof(Inspcitem_InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef Inspcitem_InspcDataExchangeAccess_InspcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define Inspcitem_InspcDataExchangeAccess_InspcREFDEF
  struct Inspcitem_InspcDataExchangeAccess_Inspc_t;
  typedef TYPE_EnhancedRefJc(Inspcitem_InspcDataExchangeAccess_Inspc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct Inspcitem_InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; Inspcitem_InspcDataExchangeAccess_InspcREF data[50]; } Inspcitem_InspcDataExchangeAccess_Inspc_X;
typedef struct Inspcitem_InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; Inspcitem_InspcDataExchangeAccess_Inspc_s data[50]; } Inspcitem_InspcDataExchangeAccess_Inspc_Y;

 extern_C struct ClassJc_t const refl_Inspcitem_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_Inspcitem_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(Inspcitem_InspcDataExchangeAccess_Inspc_s), OBJP, &refl_Inspcitem_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_Inspcitem_InspcDataExchangeAccess_Inspc_F(Inspcitem_InspcDataExchangeAccess_Inspc_s* thiz, ThCxt* _thCxt);


#define kbyteOrder_Inspcitem_InspcDataExchangeAccess_Inspc 4
#define sizeofHead_Inspcitem_InspcDataExchangeAccess_Inspc 8
#define kGetFields_Inspcitem_InspcDataExchangeAccess_Inspc 0x10  /*Aufforderung zur Rueckgabe einer Liste aller Attribute und Assoziationen des adressierten Objektes.*/
#define kAccessCheck_Inspcitem_InspcDataExchangeAccess_Inspc 0x11  /*Only check access (pwd). Answer: Check Ok*/
#define kAnswerFieldMethod_Inspcitem_InspcDataExchangeAccess_Inspc 0x14  /*Antwort auf Aufforderung zur Rueckgabe einer Liste von Attributen, Assoziationen oder Methoden.*/
#define kRegisterHandle_Inspcitem_InspcDataExchangeAccess_Inspc 0x23
#define kAnswerRegisterHandle_Inspcitem_InspcDataExchangeAccess_Inspc 0x23  /*Answer cmd to {@link #kRegisterHandle}.*/
#define kFailedRegisterRepeat_Inspcitem_InspcDataExchangeAccess_Inspc 0x24
#define kGetValueByHandle_Inspcitem_InspcDataExchangeAccess_Inspc 0x25
#define kAnswerValueByHandle_Inspcitem_InspcDataExchangeAccess_Inspc 0x25  /*Answer cmd to {@link #kGetValueByHandle}.*/
#define kAnswerValue_Inspcitem_InspcDataExchangeAccess_Inspc 0x26  /*Answer cmd to {@link #kGetValueByPath}.*/
#define kFailedValue_Inspcitem_InspcDataExchangeAccess_Inspc 0x27
#define kFailedHandle_Inspcitem_InspcDataExchangeAccess_Inspc 0x28  /*Answer cmd for a {@link #kGetValueByHandle} which is a faulty handle.*/
#define kGetValueByPath_Inspcitem_InspcDataExchangeAccess_Inspc 0x30
#define kGetAddressByPath_Inspcitem_InspcDataExchangeAccess_Inspc 0x32
#define kSetValueByPath_Inspcitem_InspcDataExchangeAccess_Inspc 0x35  /*Sets a value with given path. The item consists of:*/
#define kSetStringByPath_Inspcitem_InspcDataExchangeAccess_Inspc 0x36  /*Sets a string value.*/
#define kGetMsg_Inspcitem_InspcDataExchangeAccess_Inspc 0x40  /*Request to get all messages.*/
#define kAnswerMsg_Inspcitem_InspcDataExchangeAccess_Inspc 0x140
#define kRemoveMsg_Inspcitem_InspcDataExchangeAccess_Inspc 0x41  /*Remove gotten messages. Any message contains a sequence number. The answer of {@link #kGetMsg} */
#define kAnswerRemoveMsgOk_Inspcitem_InspcDataExchangeAccess_Inspc 0x141
#define kAnswerRemoveMsgNok_Inspcitem_InspcDataExchangeAccess_Inspc 0x241
#define kSetvaluedata_Inspcitem_InspcDataExchangeAccess_Inspc 0x50  /*This item sets a value with a given position:*/
#define kAnswervaluedata_Inspcitem_InspcDataExchangeAccess_Inspc 0x150  /*This item sets a value with a given position:*/
#define kAccessDenied_Inspcitem_InspcDataExchangeAccess_Inspc 0xfb
#define kFailedPath_Inspcitem_InspcDataExchangeAccess_Inspc 0xfe
#define kNoRessource_Inspcitem_InspcDataExchangeAccess_Inspc 0xfd
#define kFailedCommand_Inspcitem_InspcDataExchangeAccess_Inspc 0xff


/**Constructor for derived items with other head size.
*/
METHOD_C struct Inspcitem_InspcDataExchangeAccess_Inspc_t* ctorM_i_Inspcitem_InspcDataExchangeAccess_Inspc(MemC mthis, int32 sizeHeadDerived, ThCxt* _thCxt);

METHOD_C struct Inspcitem_InspcDataExchangeAccess_Inspc_t* ctorM_Inspcitem_InspcDataExchangeAccess_Inspc(MemC mthis, ThCxt* _thCxt);

/**Sets the head data and sets the length of the ByteDataAccess-element.
*/
METHOD_C void setInfoHead_Inspcitem_InspcDataExchangeAccess_Inspc(Inspcitem_InspcDataExchangeAccess_Inspc_s* thiz, int32 length, int32 cmd, int32 order, ThCxt* _thCxt);

#define setLength_Inspcitem_InspcDataExchangeAccess_Inspc(THIZ, length) \
\
{ \
  \
  setInt16_ii_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 0, length, _thCxt);\
  setLengthElement_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), length);\
}

#define setCmd_Inspcitem_InspcDataExchangeAccess_Inspc(THIZ, cmd) \
\
{ \
  \
  setInt16_ii_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 2, cmd, _thCxt);\
}

/**Returns the cmd in a Reflitem. The cmd is coded see {@link #kFailedCommand}, {@link #kAnswerFieldMethod} etc.
 */
#define getCmd_Inspcitem_InspcDataExchangeAccess_Inspc(THIZ) \
(getInt16_i_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 2))

#define getLenInfo_Inspcitem_InspcDataExchangeAccess_Inspc(THIZ) \
(getInt16_i_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 0))

/**Gets the order number of the info block. A sending info is set with the
{@link #setInfoHead(int, int, int)} with any order identification number which is unified for the target
in a proper time. The received info returns the same order ident.   
 */
#define getOrder_Inspcitem_InspcDataExchangeAccess_Inspc(THIZ) \
(getInt32_i_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kbyteOrder_Inspcitem_InspcDataExchangeAccess_Inspc))


#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class Inspcitem_InspcDataExchangeAccess_Inspc : private Inspcitem_InspcDataExchangeAccess_Inspc_s
{ public:

  int32 getCmd(){  return getCmd_Inspcitem_InspcDataExchangeAccess_Inspc(this); }

  int32 getLenInfo(){  return getLenInfo_Inspcitem_InspcDataExchangeAccess_Inspc(this); }

  int32 getOrder(){  return getOrder_Inspcitem_InspcDataExchangeAccess_Inspc(this); }

  //void setCmd(int32 cmd){ setCmd_Inspcitem_InspcDataExchangeAccess_Inspc(this, cmd); }

  void setInfoHead(int32 length, int32 cmd, int32 order){ setInfoHead_Inspcitem_InspcDataExchangeAccess_Inspc(this, length, cmd, order,  null/*_thCxt*/); }

  //void setLength(int32 length){ setLength_Inspcitem_InspcDataExchangeAccess_Inspc(this, length); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C InspcSetValue_InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InspcSetValue_InspcDataExchangeAccess_Inspc_t
{ 
  union { ByteDataAccessBaseJc_s super;} base; 
} InspcSetValue_InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_InspcSetValue_InspcDataExchangeAccess_Inspc_s sizeof(InspcSetValue_InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InspcSetValue_InspcDataExchangeAccess_InspcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define InspcSetValue_InspcDataExchangeAccess_InspcREFDEF
  struct InspcSetValue_InspcDataExchangeAccess_Inspc_t;
  typedef TYPE_EnhancedRefJc(InspcSetValue_InspcDataExchangeAccess_Inspc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InspcSetValue_InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; InspcSetValue_InspcDataExchangeAccess_InspcREF data[50]; } InspcSetValue_InspcDataExchangeAccess_Inspc_X;
typedef struct InspcSetValue_InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; InspcSetValue_InspcDataExchangeAccess_Inspc_s data[50]; } InspcSetValue_InspcDataExchangeAccess_Inspc_Y;

 extern_C struct ClassJc_t const refl_InspcSetValue_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InspcSetValue_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(InspcSetValue_InspcDataExchangeAccess_Inspc_s), OBJP, &refl_InspcSetValue_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InspcSetValue_InspcDataExchangeAccess_Inspc_F(InspcSetValue_InspcDataExchangeAccess_Inspc_s* thiz, ThCxt* _thCxt);


#define sizeofElement_InspcSetValue_InspcDataExchangeAccess_Inspc 16
#define kType_InspcSetValue_InspcDataExchangeAccess_Inspc 7


METHOD_C struct InspcSetValue_InspcDataExchangeAccess_Inspc_t* ctorM_InspcSetValue_InspcDataExchangeAccess_Inspc(MemC mthis, ThCxt* _thCxt);

/**Gets a password for access control.
 */
#define getPwd_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ) \
(_getLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 0, 6))

#define setPwd_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ, pwd) \
\
{ \
  \
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 0, 6, pwd);\
}

/**Returns the type stored in byte 7 in range 0...255.
The type is either {@link InspcDataExchangeAccess#kScalarTypes} + one of {@link ClassJc#REFLECTION_float} etc.
or maybe 0..{@link InspcDataExchangeAccess#kLengthAndString} or {@link InspcDataExchangeAccess#kReferenceAddr}
 */
#define getType_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ) \
((int16 /*J2C_cast*/)_getLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 7, 1))

#define getByte_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ) \
((int8 /*J2C_cast*/)_getLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 15, -1))

#define getShort_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ) \
((int16 /*J2C_cast*/)_getLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 14, -2))

/**A long value is provided in the bytes 8..15 in Big endian.
If only a int value will be used, it were found in the bit 12..15.
*/
METHOD_C int32 getInt_InspcSetValue_InspcDataExchangeAccess_Inspc(InspcSetValue_InspcDataExchangeAccess_Inspc_s* thiz);

/**A long value is provided in the bytes 8..15 in Big endian.
*/
METHOD_C int64 getLong_InspcSetValue_InspcDataExchangeAccess_Inspc(InspcSetValue_InspcDataExchangeAccess_Inspc_s* thiz);

/**A float value is provided in the bytes 8..11 in Big endian.
*/
METHOD_C float getFloat_InspcSetValue_InspcDataExchangeAccess_Inspc(InspcSetValue_InspcDataExchangeAccess_Inspc_s* thiz);

#define getDouble_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ) \
(getDouble_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 8))

/**Sets a byte value.  */
#define setBool_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ, value) \
\
{ \
  \
  clearData_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super));\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kType_InspcSetValue_InspcDataExchangeAccess_Inspc, 1, kScalarTypes_InspcDataExchangeAccess_Inspc + REFLECTION_boolean_ClassJc);\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 15, 1, value);\
}

/**Sets a byte value.  */
#define setByte_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ, value) \
\
{ \
  \
  clearData_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super));\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kType_InspcSetValue_InspcDataExchangeAccess_Inspc, 1, kScalarTypes_InspcDataExchangeAccess_Inspc + REFLECTION_int8_ClassJc);\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 15, 1, value);\
}

/**Sets a short value.  */
#define setShort_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ, value) \
\
{ \
  \
  clearData_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super));\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kType_InspcSetValue_InspcDataExchangeAccess_Inspc, 1, kScalarTypes_InspcDataExchangeAccess_Inspc + REFLECTION_int16_ClassJc);\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 14, 2, value);\
}

/**Sets a int32 value.  */
#define setInt_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ, value) \
\
{ \
  \
  clearData_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super));\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kType_InspcSetValue_InspcDataExchangeAccess_Inspc, 1, kScalarTypes_InspcDataExchangeAccess_Inspc + REFLECTION_int32_ClassJc);\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 12, 4, value);\
}

/**Sets a long value (int64).  */
#define setLong_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ, value) \
\
{ \
  \
  clearData_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super));\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kType_InspcSetValue_InspcDataExchangeAccess_Inspc, 1, kScalarTypes_InspcDataExchangeAccess_Inspc + REFLECTION_int64_ClassJc);\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 8, 8, value);\
}

/**Sets a float value.  */
#define setFloat_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ, value) \
\
{ \
  \
  clearData_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super));\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kType_InspcSetValue_InspcDataExchangeAccess_Inspc, 1, kScalarTypes_InspcDataExchangeAccess_Inspc + REFLECTION_float_ClassJc);\
  setFloat_if_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 12, value);\
}

/**Sets a float value given by a int image.  */
#define setFloatIntImage_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ, value) \
\
{ \
  \
  clearData_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super));\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kType_InspcSetValue_InspcDataExchangeAccess_Inspc, 1, kScalarTypes_InspcDataExchangeAccess_Inspc + REFLECTION_float_ClassJc);\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 12, 4, value);\
}

/**Sets a double value.  */
#define setDouble_InspcSetValue_InspcDataExchangeAccess_Inspc(THIZ, value) \
\
{ \
  \
  clearData_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super));\
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), kType_InspcSetValue_InspcDataExchangeAccess_Inspc, 1, kScalarTypes_InspcDataExchangeAccess_Inspc + REFLECTION_double_ClassJc);\
  setDouble_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super), 8, value);\
}


#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InspcSetValue_InspcDataExchangeAccess_Inspc : private InspcSetValue_InspcDataExchangeAccess_Inspc_s
{ public:

  int8 getByte(){  return getByte_InspcSetValue_InspcDataExchangeAccess_Inspc(this); }

  double getDouble(){  return getDouble_InspcSetValue_InspcDataExchangeAccess_Inspc(this); }

  float getFloat(){  return getFloat_InspcSetValue_InspcDataExchangeAccess_Inspc(this); }

  int32 getInt(){  return getInt_InspcSetValue_InspcDataExchangeAccess_Inspc(this); }

  int64 getLong(){  return getLong_InspcSetValue_InspcDataExchangeAccess_Inspc(this); }

  int64 getPwd(){  return getPwd_InspcSetValue_InspcDataExchangeAccess_Inspc(this); }

  int16 getShort(){  return getShort_InspcSetValue_InspcDataExchangeAccess_Inspc(this); }

  int16 getType(){  return getType_InspcSetValue_InspcDataExchangeAccess_Inspc(this); }

  //void setBool(int32 value){ setBool_InspcSetValue_InspcDataExchangeAccess_Inspc(this, value); }

  //void setByte(int32 value){ setByte_InspcSetValue_InspcDataExchangeAccess_Inspc(this, value); }

  //void setDouble(double value){ setDouble_InspcSetValue_InspcDataExchangeAccess_Inspc(this, value); }

  //void setFloatIntImage(int32 value){ setFloatIntImage_InspcSetValue_InspcDataExchangeAccess_Inspc(this, value); }

  //void setFloat(float value){ setFloat_InspcSetValue_InspcDataExchangeAccess_Inspc(this, value); }

  //void setInt(int32 value){ setInt_InspcSetValue_InspcDataExchangeAccess_Inspc(this, value); }

  //void setLong(int64 value){ setLong_InspcSetValue_InspcDataExchangeAccess_Inspc(this, value); }

  void setPwd(int32 pwd){ setPwd_InspcSetValue_InspcDataExchangeAccess_Inspc(this, pwd); }

  //void setShort(int32 value){ setShort_InspcSetValue_InspcDataExchangeAccess_Inspc(this, value); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C InspcSetValueData_InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InspcSetValueData_InspcDataExchangeAccess_Inspc_t
{ 
  union { Inspcitem_InspcDataExchangeAccess_Inspc_s super;} base; 
} InspcSetValueData_InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_InspcSetValueData_InspcDataExchangeAccess_Inspc_s sizeof(InspcSetValueData_InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InspcSetValueData_InspcDataExchangeAccess_InspcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define InspcSetValueData_InspcDataExchangeAccess_InspcREFDEF
  struct InspcSetValueData_InspcDataExchangeAccess_Inspc_t;
  typedef TYPE_EnhancedRefJc(InspcSetValueData_InspcDataExchangeAccess_Inspc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InspcSetValueData_InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; InspcSetValueData_InspcDataExchangeAccess_InspcREF data[50]; } InspcSetValueData_InspcDataExchangeAccess_Inspc_X;
typedef struct InspcSetValueData_InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; InspcSetValueData_InspcDataExchangeAccess_Inspc_s data[50]; } InspcSetValueData_InspcDataExchangeAccess_Inspc_Y;

 extern_C struct ClassJc_t const refl_InspcSetValueData_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InspcSetValueData_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(InspcSetValueData_InspcDataExchangeAccess_Inspc_s), OBJP, &refl_InspcSetValueData_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InspcSetValueData_InspcDataExchangeAccess_Inspc_F(InspcSetValueData_InspcDataExchangeAccess_Inspc_s* thiz, ThCxt* _thCxt);


#define sizeofElement_InspcSetValueData_InspcDataExchangeAccess_Inspc 32


METHOD_C struct InspcSetValueData_InspcDataExchangeAccess_Inspc_t* ctorM_InspcSetValueData_InspcDataExchangeAccess_Inspc(MemC mthis, ThCxt* _thCxt);

#define setAddress_InspcSetValueData_InspcDataExchangeAccess_Inspc(THIZ, address) \
\
{ \
  \
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super.base.super), 8, 4, address);\
}

#define setPosition_InspcSetValueData_InspcDataExchangeAccess_Inspc(THIZ, position) \
\
{ \
  \
  _setLong_ByteDataAccessBaseJc(& ((* ((THIZ))).base.super.base.super), 12, 4, position);\
}

METHOD_C void setBool_InspcSetValueData_InspcDataExchangeAccess_Inspc(InspcSetValueData_InspcDataExchangeAccess_Inspc_s* thiz, int32 value, ThCxt* _thCxt);

METHOD_C void setShort_InspcSetValueData_InspcDataExchangeAccess_Inspc(InspcSetValueData_InspcDataExchangeAccess_Inspc_s* thiz, int32 value, ThCxt* _thCxt);

METHOD_C void setByte_InspcSetValueData_InspcDataExchangeAccess_Inspc(InspcSetValueData_InspcDataExchangeAccess_Inspc_s* thiz, int32 value, ThCxt* _thCxt);

METHOD_C void setInt_InspcSetValueData_InspcDataExchangeAccess_Inspc(InspcSetValueData_InspcDataExchangeAccess_Inspc_s* thiz, int32 value, ThCxt* _thCxt);

METHOD_C void setFloat_InspcSetValueData_InspcDataExchangeAccess_Inspc(InspcSetValueData_InspcDataExchangeAccess_Inspc_s* thiz, float value, ThCxt* _thCxt);

METHOD_C void setFloatIntImage_InspcSetValueData_InspcDataExchangeAccess_Inspc(InspcSetValueData_InspcDataExchangeAccess_Inspc_s* thiz, int32 value, ThCxt* _thCxt);

METHOD_C void setDouble_InspcSetValueData_InspcDataExchangeAccess_Inspc(InspcSetValueData_InspcDataExchangeAccess_Inspc_s* thiz, double value, ThCxt* _thCxt);

METHOD_C void setLong_InspcSetValueData_InspcDataExchangeAccess_Inspc(InspcSetValueData_InspcDataExchangeAccess_Inspc_s* thiz, int64 value, ThCxt* _thCxt);

#define setHead_InspcSetValueData_InspcDataExchangeAccess_Inspc(THIZ, order) \
\
{ \
  \
  setInfoHead_Inspcitem_InspcDataExchangeAccess_Inspc((&(THIZ)->base.super), sizeofElement_InspcSetValueData_InspcDataExchangeAccess_Inspc, kSetvaluedata_Inspcitem_InspcDataExchangeAccess_Inspc, order, _thCxt);\
}


#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InspcSetValueData_InspcDataExchangeAccess_Inspc : private InspcSetValueData_InspcDataExchangeAccess_Inspc_s
{ public:

  void setAddress(int32 address){ setAddress_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, address); }

  void setBool(int32 value){ setBool_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, value,  null/*_thCxt*/); }

  void setByte(int32 value){ setByte_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, value,  null/*_thCxt*/); }

  void setDouble(double value){ setDouble_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, value,  null/*_thCxt*/); }

  void setFloatIntImage(int32 value){ setFloatIntImage_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, value,  null/*_thCxt*/); }

  void setFloat(float value){ setFloat_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, value,  null/*_thCxt*/); }

  //void setHead(int32 order){ setHead_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, order); }

  void setInt(int32 value){ setInt_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, value,  null/*_thCxt*/); }

  void setLong(int64 value){ setLong_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, value,  null/*_thCxt*/); }

  void setPosition(int32 position){ setPosition_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, position); }

  void setShort(int32 value){ setShort_InspcSetValueData_InspcDataExchangeAccess_Inspc(this, value,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_t
{ 
  union { Inspcitem_InspcDataExchangeAccess_Inspc_s super;} base; 
} InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s sizeof(InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InspcAnswerValueByHandle_InspcDataExchangeAccess_InspcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define InspcAnswerValueByHandle_InspcDataExchangeAccess_InspcREFDEF
  struct InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_t;
  typedef TYPE_EnhancedRefJc(InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; InspcAnswerValueByHandle_InspcDataExchangeAccess_InspcREF data[50]; } InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_X;
typedef struct InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s data[50]; } InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_Y;

 extern_C struct ClassJc_t const refl_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s), OBJP, &refl_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_F(InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s* thiz, ThCxt* _thCxt);


#define sizeofElement_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc 12


METHOD_C struct InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_t* ctorM_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(MemC mthis, ThCxt* _thCxt);

METHOD_C struct InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_t* ctorM_XX_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(MemC mthis, struct Inspcitem_InspcDataExchangeAccess_Inspc_t* src, ThCxt* _thCxt);

METHOD_C int32 getIxHandleFrom_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s* thiz, ThCxt* _thCxt);

METHOD_C int32 getIxHandleTo_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s* thiz, ThCxt* _thCxt);

METHOD_C void setIxHandleFrom_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s* thiz, int32 val, ThCxt* _thCxt);

METHOD_C void setIxHandleTo_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s* thiz, int32 val, ThCxt* _thCxt);


#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc : private InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc_s
{ public:

  int32 getIxHandleFrom(){  return getIxHandleFrom_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  int32 getIxHandleTo(){  return getIxHandleTo_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(this,  null/*_thCxt*/); }

  void setIxHandleFrom(int32 val){ setIxHandleFrom_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(this, val,  null/*_thCxt*/); }

  void setIxHandleTo(int32 val){ setIxHandleTo_InspcAnswerValueByHandle_InspcDataExchangeAccess_Inspc(this, val,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C InspcDataExchangeAccess_Inspc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InspcDataExchangeAccess_Inspc_t
{ 
  union { ObjectJc object; } base; 
} InspcDataExchangeAccess_Inspc_s;
  

#define sizeof_InspcDataExchangeAccess_Inspc_s sizeof(InspcDataExchangeAccess_Inspc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InspcDataExchangeAccess_InspcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define InspcDataExchangeAccess_InspcREFDEF
  struct InspcDataExchangeAccess_Inspc_t;
  typedef TYPE_EnhancedRefJc(InspcDataExchangeAccess_Inspc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InspcDataExchangeAccess_Inspc_X_t { ObjectArrayJc head; InspcDataExchangeAccess_InspcREF data[50]; } InspcDataExchangeAccess_Inspc_X;
typedef struct InspcDataExchangeAccess_Inspc_Y_t { ObjectArrayJc head; InspcDataExchangeAccess_Inspc_s data[50]; } InspcDataExchangeAccess_Inspc_Y;

 extern_C struct ClassJc_t const refl_InspcDataExchangeAccess_Inspc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InspcDataExchangeAccess_Inspc(OBJP) { CONST_ObjectJc(sizeof(InspcDataExchangeAccess_Inspc_s), OBJP, &refl_InspcDataExchangeAccess_Inspc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InspcDataExchangeAccess_Inspc_F(ObjectJc* othis, ThCxt* _thCxt);


 extern StringJc version_InspcDataExchangeAccess_Inspc;   /*Version, history and license.*/
#define maxNrOfChars_InspcDataExchangeAccess_Inspc 0xc8  /*Values between 0..199 determines the length of string.*/
#define kLengthAndString_InspcDataExchangeAccess_Inspc 0xc9  /*The value is a string uptp 200 character which's length is stored in the first byte. */
#define kReferenceAddr64_InspcDataExchangeAccess_Inspc 0xdc  /*A memory-address of an element in C-language*/
#define kInvalidHandle_InspcDataExchangeAccess_Inspc 0xdd  /*This type identification designates that the index to access by index is invalid.*/
#define kTypeNoValue_InspcDataExchangeAccess_Inspc 0xde  /*This type identification designates that the value is not available.*/
#define kReferenceAddr_InspcDataExchangeAccess_Inspc 0xdf  /*A reference is the memory-address of an element in C-language*/
#define kScalarTypes_InspcDataExchangeAccess_Inspc 0xe0  /*Scalar types started with 0xe0,*/
 extern const int32 nrofBytesSpecialTypes_InspcDataExchangeAccess_Inspc[24]; 

//!!usage: static init code, invoke that one time in start of main.
void initStatic_InspcDataExchangeAccess_Inspc();




/**Default constructor. */
METHOD_C struct InspcDataExchangeAccess_Inspc_t* ctorO_InspcDataExchangeAccess_Inspc(ObjectJc* othis, ThCxt* _thCxt);

/**Returns the number of bytes for any value which is designated 
with 0.. {@link #maxNrOfChars} .. {@link #kScalarTypes} + {@link ClassJc#REFLECTION_int} etc. 
*/
METHOD_C int32 nrofBytesForType_InspcDataExchangeAccess_Inspc(/*J2C:static method*/ int16 type, ThCxt* _thCxt);

/**Returns the byte given value with the designated type as float value with conversion. It is proper 
if an application is attempt to process a float value independent of the value type. 
*/
METHOD_C float getFloatChild_InspcDataExchangeAccess_Inspc(/*J2C:static method*/ int16 type, struct ByteDataAccessBaseJc_t* access, ThCxt* _thCxt);

/**Returns the byte given value with the designated type as int32 value with conversion. It is proper 
if an application is attempt to process an int value independent of the value type. 
*/
METHOD_C int32 getIntChild_InspcDataExchangeAccess_Inspc(/*J2C:static method*/ int16 type, struct ByteDataAccessBaseJc_t* access, ThCxt* _thCxt);


#ifdef DEF_ClassJc_Vtbl
/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Vtbl_InspcDataExchangeAccess_Inspc[]; //marker for methodTable check
typedef struct Vtbl_InspcDataExchangeAccess_Inspc_t
{ VtblHeadJc head;
  Vtbl_ObjectJc ObjectJc;
} Vtbl_InspcDataExchangeAccess_Inspc;
#endif //def DEF_ClassJc_Vtbl



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InspcDataExchangeAccess_Inspc : private InspcDataExchangeAccess_Inspc_s
{ public:

  InspcDataExchangeAccess_Inspc(){ init_ObjectJc(&this->base.object, sizeof(InspcDataExchangeAccess_Inspc_s), 0); setReflection_ObjectJc(&this->base.object, &refl_InspcDataExchangeAccess_Inspc_s, 0); ctorO_InspcDataExchangeAccess_Inspc(&this->base.object,  null/*_thCxt*/); }

  float getFloatChild(int16 type, struct ByteDataAccessBaseJc_t* access){  return getFloatChild_InspcDataExchangeAccess_Inspc(type, access,  null/*_thCxt*/); }

  int32 getIntChild(int16 type, struct ByteDataAccessBaseJc_t* access){  return getIntChild_InspcDataExchangeAccess_Inspc(type, access,  null/*_thCxt*/); }

  int32 nrofBytesForType(int16 type){  return nrofBytesForType_InspcDataExchangeAccess_Inspc(type,  null/*_thCxt*/); }
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__InspcJ2c_InspcDataExchangeAccess_Inspc_h__
