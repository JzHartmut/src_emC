/**************************************************************************
 * This file is generated by Java2C
 **copyright***************************************************************
 *************************************************************************/
#ifndef __J1c_InfoFormattedAppendJc_h__
#define __J1c_InfoFormattedAppendJc_h__

#include "emC/Base/MemC_emC.h"        //basic concept

#include "emC/Jc/ObjectJc.h"        //basic concept

#include "emC/Jc/StringJc.h"        //used often

   //basic concept


/* J2C: Forward declaration of struct ***********************************************/
struct StringFormatterJc_t;


/* J2C: includes *********************************************************/
#include "emC/Jc/StringJc.h"  //embedded type in class data


/*@CLASS_C PrepareToString_InfoFormattedAppendJc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct PrepareToString_InfoFormattedAppendJc_t
{ 
  union { ObjectJc object; } base; 
  StringJc ret; 
} PrepareToString_InfoFormattedAppendJc_s;
  

#define sizeof_PrepareToString_InfoFormattedAppendJc_s sizeof(PrepareToString_InfoFormattedAppendJc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef PrepareToString_InfoFormattedAppendJcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define PrepareToString_InfoFormattedAppendJcREFDEF
  struct PrepareToString_InfoFormattedAppendJc_t;
  typedef  TYPE_EnhancedRefJc(PrepareToString_InfoFormattedAppendJc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct PrepareToString_InfoFormattedAppendJc_X_t { ObjectArrayJc head; PrepareToString_InfoFormattedAppendJcREF data[50]; } PrepareToString_InfoFormattedAppendJc_X;
typedef struct PrepareToString_InfoFormattedAppendJc_Y_t { ObjectArrayJc head; PrepareToString_InfoFormattedAppendJc_s data[50]; } PrepareToString_InfoFormattedAppendJc_Y;

 extern_C struct ClassJc_t const refl_PrepareToString_InfoFormattedAppendJc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_PrepareToString_InfoFormattedAppendJc(OBJP) { CONST_ObjectJc(sizeof(PrepareToString_InfoFormattedAppendJc_s), OBJP, &refl_PrepareToString_InfoFormattedAppendJc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_PrepareToString_InfoFormattedAppendJc_F(ObjectJc* othis, ThCxt* _thCxt);




#ifdef DEF_ClassJc_Vtbl
/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Vtbl_PrepareToString_InfoFormattedAppendJc[]; //marker for methodTable check
typedef struct Vtbl_PrepareToString_InfoFormattedAppendJc_t
{ VtblHeadJc head;
  Vtbl_ObjectJc ObjectJc;
} Vtbl_PrepareToString_InfoFormattedAppendJc;
#endif //#ifdef DEF_ClassJc_Vtbl



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class PrepareToString_InfoFormattedAppendJc : private PrepareToString_InfoFormattedAppendJc_s
{ public:
};

#endif /*__CPLUSPLUSJcpp*/



/*@CLASS_C InfoFormattedAppendJc @@@@@@@@@@@@@@@@@@@@@@@@*/

typedef struct InfoFormattedAppendJc_t
{ 
  union { ObjectJc object; } base; 
} InfoFormattedAppendJc_s;
  

#define sizeof_InfoFormattedAppendJc_s sizeof(InfoFormattedAppendJc_s)


/**J2c: Definitions of the enhanced reference. It's conditinally because it may be defined in a included header before. */
#ifndef InfoFormattedAppendJcREFDEF
  //J2C: definition of enhanced reference where it was need firstly: 
  #define InfoFormattedAppendJcREFDEF
  struct InfoFormattedAppendJc_t;
  typedef  TYPE_EnhancedRefJc(InfoFormattedAppendJc);
#endif

/**J2c: Definitions of the array forms. NOTE: The number of elements are a helper for debug, the really used number depends on the memory size! */
typedef struct InfoFormattedAppendJc_X_t { ObjectArrayJc head; InfoFormattedAppendJcREF data[50]; } InfoFormattedAppendJc_X;
typedef struct InfoFormattedAppendJc_Y_t { ObjectArrayJc head; InfoFormattedAppendJc_s data[50]; } InfoFormattedAppendJc_Y;

 extern_C struct ClassJc_t const refl_InfoFormattedAppendJc_s;
  


/**CONST_Type useable as initializer for embedded/stack-instances*/
#define CONST_InfoFormattedAppendJc(OBJP) { CONST_ObjectJc(sizeof(InfoFormattedAppendJc_s), OBJP, &refl_InfoFormattedAppendJc_s), 0 }

/**J2C: finalize declaration. It is called by Garbage collector and inside other finalized methods.
 * It should be called by the user if the instance is removed. */
void finalize_InfoFormattedAppendJc_F(ObjectJc* othis, ThCxt* _thCxt);


 extern StringJc version_InfoFormattedAppendJc;   /*The version, history and license. */

//!!usage: static init code, invoke that one time in start of main.
void initStatic_InfoFormattedAppendJc();




typedef void MT_infoFormattedAppend_InfoFormattedAppendJc(ObjectJc* ithis, struct StringFormatterJc_t* u, ThCxt* _thCxt);
/* J2C:Call of the method at this class level, executes a dynamic call of the override-able method: */
METHOD_C void infoFormattedAppend_InfoFormattedAppendJc(ObjectJc* ithis, struct StringFormatterJc_t* u, ThCxt* _thCxt);


#ifdef DEF_ClassJc_Vtbl
/* J2C: Method table contains all dynamic linked (virtual) methods
 * of the class and all super classes and interfaces. */
 extern const char sign_Vtbl_InfoFormattedAppendJc[]; //marker for methodTable check
typedef struct Vtbl_InfoFormattedAppendJc_t
{ VtblHeadJc head;
  MT_infoFormattedAppend_InfoFormattedAppendJc* infoFormattedAppend;
  Vtbl_ObjectJc ObjectJc;
} Vtbl_InfoFormattedAppendJc;
#endif //#ifdef DEF_ClassJc_Vtbl



#if defined(__CPLUSPLUSJcpp) && defined(__cplusplus)
/* J2C: The C++-class-definition. */
class InfoFormattedAppendJc : private InfoFormattedAppendJc_s
{ public:

  virtual void infoFormattedAppend(struct StringFormatterJc_t* u)=0;
};

#endif /*__CPLUSPLUSJcpp*/

#endif //__J1c_InfoFormattedAppendJc_h__
