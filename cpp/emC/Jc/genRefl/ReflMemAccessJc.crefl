
    
#include <emC/Jc/ReflMemAccessJc.h>  


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_RemoteCpuJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_RemoteCpuJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


const struct Reflection_Fields_RemoteCpuJc_t
{ ObjectArrayJc head;
  FieldJc data[1];
} refl_Fields_RemoteCpuJc =
{ INIZ_ObjectArrayJc(refl_Fields_RemoteCpuJc, 1, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "dummy"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((RemoteCpuJc*)(0x1000))->dummy)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_RemoteCpuJc
    }
  
} }; 
 

#define DEFINED_refl_RemoteCpuJc    
const ClassJc   refl_RemoteCpuJc =
{ INIZ_objReflId_ObjectJc(refl_RemoteCpuJc, refl_ClassJc, ID_refl_ClassJc)
, "RemoteCpuJc"
, 0
, sizeof(RemoteCpuJc)
, (FieldJcArray const*)&refl_Fields_RemoteCpuJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_RemoteAddress_Inspc_emC;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_RemoteAddress_Inspc_emC[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


const struct Reflection_Fields_RemoteAddress_Inspc_emC_t
{ ObjectArrayJc head;
  FieldJc data[1];
} refl_Fields_RemoteAddress_Inspc_emC =
{ INIZ_ObjectArrayJc(refl_Fields_RemoteAddress_Inspc_emC, 1, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "addrTarget"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_uint32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((RemoteAddress_Inspc_emC*)(0x1000))->addrTarget)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_RemoteAddress_Inspc_emC
    }
  
} }; 
 

#define DEFINED_refl_RemoteAddress_Inspc_emC    
const ClassJc   refl_RemoteAddress_Inspc_emC =
{ INIZ_objReflId_ObjectJc(refl_RemoteAddress_Inspc_emC, refl_ClassJc, ID_refl_ClassJc)
, "RemoteAddress_Inspc_emC"
, 0
, sizeof(RemoteAddress_Inspc_emC)
, (FieldJcArray const*)&refl_Fields_RemoteAddress_Inspc_emC  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_MemSegmJc_T_Addr_MemSegmJc_T;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_MemSegmJc_T_Addr_MemSegmJc_T[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


const struct Reflection_Fields_MemSegmJc_T_Addr_MemSegmJc_T_t
{ ObjectArrayJc head;
  FieldJc data[2];
} refl_Fields_MemSegmJc_T_Addr_MemSegmJc_T =
{ INIZ_ObjectArrayJc(refl_Fields_MemSegmJc_T_Addr_MemSegmJc_T, 2, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "a"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_void                                                                                            
    , 0 | kReference_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((MemSegmJc*)(0x1000))->addr.a)) - ((intptr_t)(&((MemSegmJc*)(0x1000))->addr)) )  /*implicit struct*/
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemSegmJc_T_Addr_MemSegmJc_T
    }
  , 
    { "a32"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_uint32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((MemSegmJc*)(0x1000))->addr.a32)) - ((intptr_t)(&((MemSegmJc*)(0x1000))->addr)) )  /*implicit struct*/
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemSegmJc_T_Addr_MemSegmJc_T
    }
  
} }; 
 

#define DEFINED_refl_MemSegmJc_T_Addr_MemSegmJc_T    
const ClassJc   refl_MemSegmJc_T_Addr_MemSegmJc_T =
{ INIZ_objReflId_ObjectJc(refl_MemSegmJc_T_Addr_MemSegmJc_T, refl_ClassJc, ID_refl_ClassJc)
, "MemSegmJc_T_Addr_MemSegmJc_T"
, 0
, sizeof(((MemSegmJc*)0x1000)->addr)
, (FieldJcArray const*)&refl_Fields_MemSegmJc_T_Addr_MemSegmJc_T  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_MemSegmJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_MemSegmJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


const struct Reflection_Fields_MemSegmJc_t
{ ObjectArrayJc head;
  FieldJc data[2];
} refl_Fields_MemSegmJc =
{ INIZ_ObjectArrayJc(refl_Fields_MemSegmJc, 2, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "addr"
    , 0   //no Array, no Bitfield                           
    , &refl_MemSegmJc_T_Addr_MemSegmJc_T                                                                                            
    , 0|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((MemSegmJc*)(0x1000))->addr)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemSegmJc
    }
  , 
    { "segm"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((MemSegmJc*)(0x1000))->segm)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemSegmJc
    }
  
} }; 
 

#define DEFINED_refl_MemSegmJc    
const ClassJc   refl_MemSegmJc =
{ INIZ_objReflId_ObjectJc(refl_MemSegmJc, refl_ClassJc, ID_refl_ClassJc)
, "MemSegmJc"
, 0
, sizeof(MemSegmJc)
, (FieldJcArray const*)&refl_Fields_MemSegmJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_Access1TxData_ReflMemAccessJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_Access1TxData_ReflMemAccessJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


const struct Reflection_Fields_Access1TxData_ReflMemAccessJc_t
{ ObjectArrayJc head;
  FieldJc data[3];
} refl_Fields_Access1TxData_ReflMemAccessJc =
{ INIZ_ObjectArrayJc(refl_Fields_Access1TxData_ReflMemAccessJc, 3, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "cmd"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((Access1TxData_ReflMemAccessJc*)(0x1000))->cmd)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Access1TxData_ReflMemAccessJc
    }
  , 
    { "address"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((Access1TxData_ReflMemAccessJc*)(0x1000))->address)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Access1TxData_ReflMemAccessJc
    }
  , 
    { "input"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((Access1TxData_ReflMemAccessJc*)(0x1000))->input)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Access1TxData_ReflMemAccessJc
    }
  
} }; 
 

#define DEFINED_refl_Access1TxData_ReflMemAccessJc    
const ClassJc   refl_Access1TxData_ReflMemAccessJc =
{ INIZ_objReflId_ObjectJc(refl_Access1TxData_ReflMemAccessJc, refl_ClassJc, ID_refl_ClassJc)
, "Access1TxData_ReflMemAccessJc"
, 0
, sizeof(Access1TxData_ReflMemAccessJc)
, (FieldJcArray const*)&refl_Fields_Access1TxData_ReflMemAccessJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_AccessTxData_ReflMemAccessJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_AccessTxData_ReflMemAccessJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


extern_C const ClassJc refl_Access1TxData_ReflMemAccessJc;  //used for field data

const struct Reflection_Fields_AccessTxData_ReflMemAccessJc_t
{ ObjectArrayJc head;
  FieldJc data[3];
} refl_Fields_AccessTxData_ReflMemAccessJc =
{ INIZ_ObjectArrayJc(refl_Fields_AccessTxData_ReflMemAccessJc, 3, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "heartBeat"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((AccessTxData_ReflMemAccessJc*)(0x1000))->heartBeat)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_AccessTxData_ReflMemAccessJc
    }
  , 
    { "seqNrofData"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((AccessTxData_ReflMemAccessJc*)(0x1000))->seqNrofData)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_AccessTxData_ReflMemAccessJc
    }
  , 
    { "data"
    , 10 //nrofArrayElements                           
    , &refl_Access1TxData_ReflMemAccessJc                                                                                            
    , 0 | kStaticArray_Modifier_reflectJc|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((AccessTxData_ReflMemAccessJc*)(0x1000))->data)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_AccessTxData_ReflMemAccessJc
    }
  
} }; 
 

#define DEFINED_refl_AccessTxData_ReflMemAccessJc    
const ClassJc   refl_AccessTxData_ReflMemAccessJc =
{ INIZ_objReflId_ObjectJc(refl_AccessTxData_ReflMemAccessJc, refl_ClassJc, ID_refl_ClassJc)
, "AccessTxData_ReflMemAccessJc"
, 0
, sizeof(AccessTxData_ReflMemAccessJc)
, (FieldJcArray const*)&refl_Fields_AccessTxData_ReflMemAccessJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_Access1RxData_ReflMemAccessJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_Access1RxData_ReflMemAccessJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


const struct Reflection_Fields_Access1RxData_ReflMemAccessJc_t
{ ObjectArrayJc head;
  FieldJc data[2];
} refl_Fields_Access1RxData_ReflMemAccessJc =
{ INIZ_ObjectArrayJc(refl_Fields_Access1RxData_ReflMemAccessJc, 2, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "lo"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((Access1RxData_ReflMemAccessJc*)(0x1000))->lo)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Access1RxData_ReflMemAccessJc
    }
  , 
    { "hi"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((Access1RxData_ReflMemAccessJc*)(0x1000))->hi)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_Access1RxData_ReflMemAccessJc
    }
  
} }; 
 

#define DEFINED_refl_Access1RxData_ReflMemAccessJc    
const ClassJc   refl_Access1RxData_ReflMemAccessJc =
{ INIZ_objReflId_ObjectJc(refl_Access1RxData_ReflMemAccessJc, refl_ClassJc, ID_refl_ClassJc)
, "Access1RxData_ReflMemAccessJc"
, 0
, sizeof(Access1RxData_ReflMemAccessJc)
, (FieldJcArray const*)&refl_Fields_Access1RxData_ReflMemAccessJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_AccessRxData_ReflMemAccessJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_AccessRxData_ReflMemAccessJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


extern_C const ClassJc refl_Access1RxData_ReflMemAccessJc;  //used for field data

const struct Reflection_Fields_AccessRxData_ReflMemAccessJc_t
{ ObjectArrayJc head;
  FieldJc data[3];
} refl_Fields_AccessRxData_ReflMemAccessJc =
{ INIZ_ObjectArrayJc(refl_Fields_AccessRxData_ReflMemAccessJc, 3, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "heartBeat"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((AccessRxData_ReflMemAccessJc*)(0x1000))->heartBeat)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_AccessRxData_ReflMemAccessJc
    }
  , 
    { "seqNrofData"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((AccessRxData_ReflMemAccessJc*)(0x1000))->seqNrofData)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_AccessRxData_ReflMemAccessJc
    }
  , 
    { "data"
    , 10 //nrofArrayElements                           
    , &refl_Access1RxData_ReflMemAccessJc                                                                                            
    , 0 | kStaticArray_Modifier_reflectJc|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((AccessRxData_ReflMemAccessJc*)(0x1000))->data)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_AccessRxData_ReflMemAccessJc
    }
  
} }; 
 

#define DEFINED_refl_AccessRxData_ReflMemAccessJc    
const ClassJc   refl_AccessRxData_ReflMemAccessJc =
{ INIZ_objReflId_ObjectJc(refl_AccessRxData_ReflMemAccessJc, refl_ClassJc, ID_refl_ClassJc)
, "AccessRxData_ReflMemAccessJc"
, 0
, sizeof(AccessRxData_ReflMemAccessJc)
, (FieldJcArray const*)&refl_Fields_AccessRxData_ReflMemAccessJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_MemAccessDebugJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_MemAccessDebugJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


const struct Reflection_Fields_MemAccessDebugJc_t
{ ObjectArrayJc head;
  FieldJc data[4];
} refl_Fields_MemAccessDebugJc =
{ INIZ_ObjectArrayJc(refl_Fields_MemAccessDebugJc, 4, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "cmd"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((MemAccessDebugJc*)(0x1000))->cmd)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemAccessDebugJc
    }
  , 
    { "address"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_uint32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((MemAccessDebugJc*)(0x1000))->address)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemAccessDebugJc
    }
  , 
    { "input"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((MemAccessDebugJc*)(0x1000))->input)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemAccessDebugJc
    }
  , 
    { "output"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((MemAccessDebugJc*)(0x1000))->output)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemAccessDebugJc
    }
  
} }; 
 

#define DEFINED_refl_MemAccessDebugJc    
const ClassJc   refl_MemAccessDebugJc =
{ INIZ_objReflId_ObjectJc(refl_MemAccessDebugJc, refl_ClassJc, ID_refl_ClassJc)
, "MemAccessDebugJc"
, 0
, sizeof(MemAccessDebugJc)
, (FieldJcArray const*)&refl_Fields_MemAccessDebugJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL


//forward declaration of the following definition necessary because extern_C definition. 
extern_C const ClassJc refl_MemAccessArrayDebugJc;

#ifdef DEF_REFLECTION_OFFS_FILE  //experience: ReflOffs h-file-related
int32 const reflectionOffset_MemAccessArrayDebugJc[] =
{ 123  //< &nrClass>   //index of class in Offset data
}; 
    
#else  //DEF_REFLECTION_FULL


extern_C const ClassJc refl_MemAccessDebugJc;  //used for field item

const struct Reflection_Fields_MemAccessArrayDebugJc_t
{ ObjectArrayJc head;
  FieldJc data[2];
} refl_Fields_MemAccessArrayDebugJc =
{ INIZ_ObjectArrayJc(refl_Fields_MemAccessArrayDebugJc, 2, FieldJc, refl_FieldJc, ID_refl_FieldJc)
, {  
    { "ix"
    , 0   //no Array, no Bitfield                           
    , REFLECTION_int32                                                                                            
    , (4<<kBitPrimitiv_Modifier_reflectJc) //bitModifiers
    , (int16)( ((intptr_t)(&((MemAccessArrayDebugJc*)(0x1000))->ix)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemAccessArrayDebugJc
    }
  , 
    { "item"
    , 20 //nrofArrayElements                           
    , &refl_MemAccessDebugJc                                                                                            
    , 0 | kStaticArray_Modifier_reflectJc|kEmbedded_Modifier_reflectJc //bitModifiers
    , (int16)( ((intptr_t)(&((MemAccessArrayDebugJc*)(0x1000))->item)) -0x1000 )
    , 0  //offsetToObjectifcBase                                                            
    , &refl_MemAccessArrayDebugJc
    }
  
} }; 
 

#define DEFINED_refl_MemAccessArrayDebugJc    
const ClassJc   refl_MemAccessArrayDebugJc =
{ INIZ_objReflId_ObjectJc(refl_MemAccessArrayDebugJc, refl_ClassJc, ID_refl_ClassJc)
, "MemAccessArrayDebugJc"
, 0
, sizeof(MemAccessArrayDebugJc)
, (FieldJcArray const*)&refl_Fields_MemAccessArrayDebugJc  //attributes and associations
, null  //method      
, null  //superclass  
, null  //interfaces  
, 0   
#ifdef DEF_ClassJc_Vtbl  
, null  //virtual table
#endif
};

#endif //DEF_REFLECTION_FULL
