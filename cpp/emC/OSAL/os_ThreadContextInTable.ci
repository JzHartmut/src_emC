/************************************************************************************************
 * Copyright/Copyleft:
 *
 * For this source the LGPL Lesser General Public License,
 * published by the Free Software Foundation is valid.
 * It means:
 * 1) You can use this source without any restriction for any desired purpose.
 * 2) You can redistribute copies of this source to everybody.
 * 3) Every user of this source, also the user of redistribute copies
 *    with or without payment, must accept this license for further using.
 * 4) But the LPGL ist not appropriate for a whole software product,
 *    if this source is only a part of them. It means, the user
 *    must publish this part of source,
 *    but don't need to publish the whole source of the own product.
 * 5) You can study and modify (improve) this source
 *    for own using or for redistribution, but you have to license the
 *    modified sources likewise under this LGPL Lesser General Public License.
 *    You mustn't delete this Copyright/Copyleft inscription in this source file.
 *
 * This source may be used also with another licence, if the author 
 * and all other here named co-authors have agreed to this contract.
 * Especially a company can use a copy of this sources in its products without publishing.
 * The user should have a underwritten contract therefore.
 *
 * @author Hartmut Schorrig, Germany, Pinzberg, www.vishia.org
 *
 **copyright***************************************************************************************
 *
 * @content This file is included in os_thread.c if a the os doesn't support a Thread context 
 *          respectively a thread local storage, TLS in the form of a simple thread-specific get method.
 *          This routine provides the thread context by searching with the thread-id.
 * @author Hartmut Schorrig, Pinzberg, Germany
 * @version 0.94
 * list of changes:
 * 2007-10-01: Hartmut creation
 *
 ****************************************************************************/

/**The static singleton AllTheadContext instance, with initialization.
 */
typedef struct AllThreadContext_t
{ 
  /**Actual nr of Threads with ThreadContext. */
  int32 actNrofThreads;

  /**Array of thread id. */
  int32 id[OS_maxNrofThreads];

  /**Array of ThreadContext referenes, same size as id. */
  OS_ThreadContext* context[OS_maxNrofThreads];



}AllThreadContext;

extern AllThreadContext allThreads_Rtos; //the_AllThreadContext;
extern const struct Class_Jc_t reflection_AllThreadContext;

AllThreadContext allThreads_Rtos
=
{ 0 //actNrofThreads
, {0} //id_rest
, {0} //context  
};







/**This algorithm is equal java.util.Arrays.binarySearch(int[] a, int fromIndex, int toIndex, int key)
 * but without rangeCheck of input values.
 * The algoritm works only if the data are sorted and the indices are matching.
 */ 
static int binarySearch_int_ThreadContextInTable(int32 const* data, int fromIndex, int toIndex, int32 key)
{ int low = fromIndex;
	int high = toIndex -1;
	while (low <= high)
  { int mid = (low + high) >> 1;
	  int32 midVal = data[mid];
	  if (midVal < key)
		{ low = mid + 1;
	  }
    else if (midVal > key)
		{ high = mid - 1;
	  }
    else
		{ return mid; // key found
    }
	}
	return -(low + 1);  // key not found.
}



/*The implementiation uses binary search to assign the idThread to the threadContext. */
METHOD_C OS_ThreadContext* os_getThreadContextInTable(int idThread)
{ OS_ThreadContext* current;
  int idxContext;
  idxContext = binarySearch_int_ThreadContextInTable(allThreads_Rtos.id, 0, allThreads_Rtos.actNrofThreads, idThread);
  if(idxContext >=0)
  { current = allThreads_Rtos.context[idxContext];
  }
  else 
  { current = null;
  }
  return current;
}


/*The implementiation uses binary search to assign the idThread to the threadContext. */
int os_setThreadContextInTable(int idThread, OS_ThreadContext* threadContext)
{ int idxContext;
  int error = 0;
  idxContext = binarySearch_int_ThreadContextInTable(allThreads_Rtos.id, 0, allThreads_Rtos.actNrofThreads, idThread);
  if(idxContext >=0)
  { allThreads_Rtos.context[idxContext] = threadContext;
  }
  else if(idxContext < 0 && allThreads_Rtos.actNrofThreads < OS_maxNrofThreads)
  { //the thread id is not found in the table, that is because the thread is created and started outside this routines.
    //In this case a ThreadJc structure is to be created.
    //arrange the new Thread in the list.
    idxContext = -idxContext -1; //the index at set position.
    //shift all ids to back
    memmove(&allThreads_Rtos.id[idxContext +1], &allThreads_Rtos.id[idxContext], sizeof(allThreads_Rtos.id[0])* (allThreads_Rtos.actNrofThreads - idxContext));
    allThreads_Rtos.id[idxContext] = idThread;
    //shift all pointers to back.
    memmove(&allThreads_Rtos.context[idxContext +1], &allThreads_Rtos.context[idxContext], sizeof(allThreads_Rtos.context[0])* (allThreads_Rtos.actNrofThreads - idxContext));
    allThreads_Rtos.context[idxContext] = threadContext;
    //
    allThreads_Rtos.actNrofThreads +=1;
  }
  else if(idxContext <0)
  { //Exception
    error = -1;
  }
  return error;
}




